{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from 'flatpickr';\nimport 'flatpickr/dist/flatpickr.min.css';\nimport iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\n\nconst startButton = document.querySelector('[data-start]');\nconst daysElement = document.querySelector('[data-days]');\nconst hoursElement = document.querySelector('[data-hours]');\nconst minutesElement = document.querySelector('[data-minutes]');\nconst secondsElement = document.querySelector('[data-seconds]');\nconst input = document.querySelector('#datetime-picker');\n\nlet userSelectedDate = null;\nstartButton.disabled = true;\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    console.log(selectedDates[0]);\n    const currentDate = new Date();\n    if (selectedDates[0] < currentDate) {\n      iziToast.error({\n        title: 'Error',\n        message: 'Please choose a date in the future',\n        position: 'center',\n      });\n    } else {\n      startButton.disabled = false;\n      userSelectedDate = selectedDates[0];\n      startButton.addEventListener('click', onStartBtnClick);\n    }\n  },\n};\n\nflatpickr(input, options);\n\nfunction onStartBtnClick() {\n  const intervalId = setInterval(() => {\n    const currentTime = Date.now();\n    const deltaTime = userSelectedDate - currentTime;\n\n    if (deltaTime < 1000) {\n      clearInterval(intervalId);\n    }\n\n    const { days, hours, minutes, seconds } = convertMs(deltaTime);\n\n    daysElement.textContent = addLeadingZero(days);\n    hoursElement.textContent = addLeadingZero(hours);\n    minutesElement.textContent = addLeadingZero(minutes);\n    secondsElement.textContent = addLeadingZero(seconds);\n  }, 1000);\n\n  startButton.disabled = true;\n  input.disabled = true;\n}\n\nfunction convertMs(ms) {\n  // Number of milliseconds per unit of time\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  // Remaining days\n  const days = Math.floor(ms / day);\n  // Remaining hours\n  const hours = Math.floor((ms % day) / hour);\n  // Remaining minutes\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  // Remaining seconds\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n\nfunction addLeadingZero(value) {\n  return String(value).padStart(2, '0');\n}\n"],"names":["startButton","daysElement","hoursElement","minutesElement","secondsElement","input","userSelectedDate","options","selectedDates","currentDate","iziToast","onStartBtnClick","flatpickr","intervalId","currentTime","deltaTime","days","hours","minutes","seconds","convertMs","addLeadingZero","ms","value"],"mappings":"2GAKA,MAAMA,EAAc,SAAS,cAAc,cAAc,EACnDC,EAAc,SAAS,cAAc,aAAa,EAClDC,EAAe,SAAS,cAAc,cAAc,EACpDC,EAAiB,SAAS,cAAc,gBAAgB,EACxDC,EAAiB,SAAS,cAAc,gBAAgB,EACxDC,EAAQ,SAAS,cAAc,kBAAkB,EAEvD,IAAIC,EAAmB,KACvBN,EAAY,SAAW,GAEvB,MAAMO,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACrB,QAAQ,IAAIA,EAAc,CAAC,CAAC,EAC5B,MAAMC,EAAc,IAAI,KACpBD,EAAc,CAAC,EAAIC,EACrBC,EAAS,MAAM,CACb,MAAO,QACP,QAAS,qCACT,SAAU,QAClB,CAAO,GAEDV,EAAY,SAAW,GACvBM,EAAmBE,EAAc,CAAC,EAClCR,EAAY,iBAAiB,QAASW,CAAe,EAExD,CACH,EAEAC,EAAUP,EAAOE,CAAO,EAExB,SAASI,GAAkB,CACzB,MAAME,EAAa,YAAY,IAAM,CACnC,MAAMC,EAAc,KAAK,MACnBC,EAAYT,EAAmBQ,EAEjCC,EAAY,KACd,cAAcF,CAAU,EAG1B,KAAM,CAAE,KAAAG,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,GAAYC,EAAUL,CAAS,EAE7Dd,EAAY,YAAcoB,EAAeL,CAAI,EAC7Cd,EAAa,YAAcmB,EAAeJ,CAAK,EAC/Cd,EAAe,YAAckB,EAAeH,CAAO,EACnDd,EAAe,YAAciB,EAAeF,CAAO,CACpD,EAAE,GAAI,EAEPnB,EAAY,SAAW,GACvBK,EAAM,SAAW,EACnB,CAEA,SAASe,EAAUE,EAAI,CAQrB,MAAMN,EAAO,KAAK,MAAMM,EAAK,KAAG,EAE1BL,EAAQ,KAAK,MAAOK,EAAK,MAAO,IAAI,EAEpCJ,EAAU,KAAK,MAAQI,EAAK,MAAO,KAAQ,GAAM,EAEjDH,EAAU,KAAK,MAASG,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAN,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC,CAEA,SAASE,EAAeE,EAAO,CAC7B,OAAO,OAAOA,CAAK,EAAE,SAAS,EAAG,GAAG,CACtC"}